#------------------------------------------------------------------------------#
# FleCSI Gitlab CI: Templates
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
# darwin_archive_spack_env
#
# Archive the current spack state.
#------------------------------------------------------------------------------#

.darwin_archive_spack_env:
  script: &darwin_archive_spack_env
    - if [ -n "$ARCHIVE_SPACK_ENV" ]; then header "Archiving Spack Environment" && cd $TMPDIR && mksquashfs spack ${CI_PROJECT_DIR}/state/spack.sqfs; fi
    # store architecture information for dependent jobs as variable in build.env
    - echo "JOB_ARCH_CONSTRAINT=cpu_family:$(spack arch -t | sed s/_avx512//)" > ${CI_PROJECT_DIR}/state/build.env

#------------------------------------------------------------------------------#
# darwin_restore_spack_env
#
# Restore an archived spack state.
#------------------------------------------------------------------------------#

.darwin_restore_spack_env:
  script: &darwin_restore_spack_env
    - cd $TMPDIR && unsquashfs -d spack ${CI_PROJECT_DIR}/state/spack.sqfs

#------------------------------------------------------------------------------#
# darwin_env_create
#
# Create a clean spack environment on Darwin
#------------------------------------------------------------------------------#
.aux_darwin_print_env_info:
  script: &darwin_print_env_info
    - |
      header "Creating Build Environment"
      variable ENVIRONMENT
      variable VARIANTS
      variable TOOLCHAIN
      variable PARTITIONS

.darwin_python_env_init:
  script: &darwin_python_env_init
    - section start "python_env_init[collapsed=true]" "Adding Python dependencies"
    - spack config add concretizer:unify:when_possible
    - spack config add concretizer:reuse:false
    - spack config add packages:all:compiler:["gcc@${GCC_VERSION}"]
    - spack add cmake py-sphinx py-sphinx-rtd-theme graphviz +poppler doxygen
    - spack install -j $(nproc)
    - section end python_env_init

.darwin_clang_format_init:
  script: &darwin_clang_format_init
    - module load clang/13.0.0

.darwin_env_create:
  script: &darwin_env_create
    - module load git
    - export DARWIN_SPACK_BOOTSTRAP_MIRROR=/projects/flecsi-devel/gitlab/spack-bootstrap/${USE_SPACK_UPSTREAM}/$(uname -i)
    - |
      rsync -rpl \
        --exclude=".git" \
        --include="etc/spack/**" \
        --include="lib/spack/**" \
        --exclude-from=${DARWIN_SPACK_UPSTREAM}/.gitignore \
        ${DARWIN_SPACK_UPSTREAM}/ $TMPDIR/spack/

#------------------------------------------------------------------------------#
# darwin_env_shell
#
# Convenience function to setup shell environment on Darwin
#------------------------------------------------------------------------------#

.darwin_env_shell:
  script: &darwin_env_shell
    - export SPACK_DISABLE_LOCAL_CONFIG=true
    - export SPACK_USER_CACHE_PATH=$TMPDIR/spack-local
    - export SPACK_SKIP_MODULES=true
    - source $TMPDIR/spack/share/spack/setup-env.sh
    - module load gcc/${GCC_VERSION}
    - module load clang/${CLANG_VERSION}
      # UCX workaround to avoid misdetecting GPU memory as host memory
    - export UCX_MEMTYPE_CACHE=n

.darwin_env_spack_environment:
  script: &darwin_env_spack_environment
    - export SPACK_ENVIRONMENT=`echo "darwin-${ENVIRONMENT}" | sed 's,\.,-,g'`

#------------------------------------------------------------------------------#
# darwin_env_init
#
# Initialize Spack environment on Darwin
#------------------------------------------------------------------------------#
.darwin_env_init:
  script: &darwin_env_init
    - section start "spack_env_init[collapsed=true]" "Creating Spack environment"
    - *darwin_env_create
    - *darwin_print_env_info
    - *darwin_env_shell
    - *darwin_env_spack_environment
    - spack bootstrap add --trust local-sources ${DARWIN_SPACK_BOOTSTRAP_MIRROR}/metadata/sources
    - spack bootstrap add --trust local-binaries ${DARWIN_SPACK_BOOTSTRAP_MIRROR}/metadata/binaries
    - spack env create ${SPACK_ENVIRONMENT}
    - spack env activate ${SPACK_ENVIRONMENT}
    - spack config add upstreams:default:install_tree:${DARWIN_SPACK_UPSTREAM}/opt/spack/
    - spack repo add spack-repo
    - section end spack_env_init

.darwin_env_spack_install_flecsi_deps:
  script: &darwin_env_spack_install_flecsi_deps
    - section start "spack_env_install_flecsi_deps[collapsed=true]" "Installing FleCSI dependencies"
    - echo "spack add flecsi %${TOOLCHAIN} ${VARIANTS} ${ARCH_DEPS}"
    - spack add flecsi %${TOOLCHAIN} ${VARIANTS} ${ARCH_DEPS}
    - spack install -j $(nproc) --fresh --only dependencies
    - spack find -v
    - section end spack_env_install_flecsi_deps

#------------------------------------------------------------------------------#
# darwin_build_template
#
# This template builds flecsi on the Darwin cluster
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITIONS:    Darwin cluster partitions
#   VARIANTS: Spack variants
#------------------------------------------------------------------------------#

.aux_darwin_print_build_info:
  script: &darwin_print_build_info
    - |-
      header "Creating Build Environment"
      variable ENVIRONMENT
      variable PARTITIONS
      value "Extra CMake Options" "${CMAKE_OPTIONS}"
      value "Spack arch" "$(spack arch)"

.darwin_setup_hip:
  script: &darwin_setup_hip
    - |
      if [[ "${CI_JOB_NAME}" =~ "rocm" ]]; then
        module load rocm/${ROCM_VERSION}
        export HIPCC_COMPILE_FLAGS_APPEND="--gcc-install-dir=/projects/opt/rhel8/x86_64/gcc/${GCC_VERSION}/lib/gcc/x86_64-pc-linux-gnu/${GCC_VERSION}"
        export HIPCC_LINK_FLAGS_APPEND="${HIPCC_COMPILE_FLAGS_APPEND}"
        header "Using Darwin HIP installation at: ${ROCM_PATH}"
      fi

.darwin_build_template:
  script:
    - *darwin_env_init
    - *darwin_env_spack_install_flecsi_deps
    - if [ -f /usr/bin/nvidia-smi ] ; then nvidia-smi || true; fi
    - spack env activate ${SPACK_ENVIRONMENT}
    - *darwin_setup_hip
    - section start build_noflog "Build without FLOG"
    - *darwin_print_build_info
    - spack python tools/spack_cmake -B ${CI_PROJECT_DIR}/state/build -S . -i flecsi -- -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/state/install -DENABLE_FLOG=OFF ${CMAKE_OPTIONS}
    - cd ${CI_PROJECT_DIR}/state/build
    - cmake --build . -j $(nproc)
    - section end build_noflog
    - section start build "Build with FLOG"
    - cmake -DENABLE_FLOG=ON -DENABLE_UNIT_TESTS=ON .
    - cmake --build . -j $(nproc)
    - section end build
    - section start test "Test"
    - export GASNET_BACKTRACE=1
    - export CTEST_OUTPUT_ON_FAILURE=1
    - ctest --timeout ${DEFAULT_TEST_TIMEOUT} --output-junit tests.xml
    - section end test
    - section start install "Install"
    - cmake --build . --target install
    - section end install
    - *darwin_archive_spack_env
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state
    reports:
      junit: ${CI_PROJECT_DIR}/state/build/tests.xml
      dotenv: ${CI_PROJECT_DIR}/state/build.env

#------------------------------------------------------------------------------#
# darwin_defaults_build_template
#
# This template builds flecsi on the Darwin cluster with no options passed to
# cmake to test the default settings.
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITION:    Darwin cluster partition
#   VARIANTS: Spack variants
#------------------------------------------------------------------------------#

.aux_darwin_print_defaults_build_info:
  script: &darwin_print_defaults_build_info
    - |-
      header "Creating Build Environment"
      variable ENVIRONMENT
      variable PARTITIONS
      which gcc
      which cc
      spack arch

.darwin_defaults_build_template:
  script:
    - *darwin_env_init
    - *darwin_env_spack_install_flecsi_deps
    - *darwin_print_defaults_build_info
    - section start build "Build"
    - which gcc
    - which cc
    - cmake -DCMAKE_INSTALL_PREFIX=${CI_PROJECT_DIR}/state/install -B ${CI_PROJECT_DIR}/state/build -S .
    - cd ${CI_PROJECT_DIR}/state/build
    - cmake --build . -j $(nproc)
    - section end build
    - section start install "Install"
    - cmake --build . --target install
    - section end install
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state

#------------------------------------------------------------------------------#
# darwin_docs_and_format_template
#
# This template builds the flecsi docs on the Darwin cluster and checks 
# formatting
#
# Variables:
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#   PARTITIONS:   Darwin cluster partitions
#   FORMAT_VERSION: The required version of clang-format
#------------------------------------------------------------------------------#
#
.aux_print_diff_format_info:
  script: &print_diff_format_info
    - |-
      header "Checking Formatting"
      value "Version (clang-format)" "${FORMAT_VERSION}"

.darwin_docs_and_format_template:
  script:
    - *darwin_env_init
    - *darwin_python_env_init
    - *darwin_clang_format_init
    - *print_diff_format_info
    - section start docs "Build Documentation"
    - cmake -DENABLE_LIBRARY=OFF -DENABLE_DOCUMENTATION=ON -DENABLE_FORMAT=ON -DCLANG_FORMAT_VERSION=${FORMAT_VERSION} -B ${CI_PROJECT_DIR}/state/build -S .
    - cd ${CI_PROJECT_DIR}/state/build
    - fail=0
    - |
      if cmake --build . --target doc; then
        touch ${CI_PROJECT_DIR}/state/docs-passed;
      else fail=$?
      fi
    - section end docs
    - section start format "Check Formatting"
    - |
      if cmake --build . --target format && cd ${CI_PROJECT_DIR} && git diff --exit-code --compact-summary; then
        touch ${CI_PROJECT_DIR}/state/format-passed;
      else fail=$?
      fi
    - date
    - section end format
    - exit $fail
  artifacts:
    expire_in: 2 weeks
    paths:
      - ${CI_PROJECT_DIR}/state

#------------------------------------------------------------------------------#
# darwin_standalone_template
#
# This template builds the flecsi tutorial examples.
#
# Variables:
#   LABEL:        This will be used to create unique temporary directories.
#   STDIR:        The source directory (containing CMakeLists.txt file).
#   ENVIRONMENT:  The target environment from the flecsi gitlab-ci project,
#                 e.g., one of the primary branches, such as 'devel', or '1.4'.
#------------------------------------------------------------------------------#

.aux_print_build_standalone_info:
  script: &print_build_standalone_info
    - |-
      header "Creating Build Environment"
      variable ENVIRONMENT
      variable LABEL
      value "Source Directory" "${STDIR}"
      variable PARTITIONS

.darwin_standalone_template:
  stage: Standalone
  script:
    - *darwin_restore_spack_env
    - *darwin_env_shell
    - *darwin_env_spack_environment
    - export CMAKE_PREFIX_PATH=${CI_PROJECT_DIR}/state/install
    - spack env activate ${SPACK_ENVIRONMENT}
    - spack arch
    - *darwin_setup_hip
    - *print_build_standalone_info
    - spack python ${CI_PROJECT_DIR}/tools/spack_cmake -B ${CI_PROJECT_DIR}/state/build-${LABEL} -S ${CI_PROJECT_DIR}/${STDIR} -c -i flecsi -- -DENABLE_UNIT_TESTS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
    - cd ${CI_PROJECT_DIR}/state/build-${LABEL}
    - cmake --build .
    - export CTEST_OUTPUT_ON_FAILURE=1
    - ctest --timeout ${DEFAULT_TEST_TIMEOUT}

#------------------------------------------------------------------------------#
# check_format_template
#------------------------------------------------------------------------------#


.check_docs_and_format_template:
  stage: Final
  script:
    - "[ -e ${CI_PROJECT_DIR}/state/format-passed ] && [ -e ${CI_PROJECT_DIR}/state/docs-passed ]"
