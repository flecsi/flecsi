#------------------------------------------------------------------------------#
# FleCSI Gitlab CI: Main
#------------------------------------------------------------------------------#

stages:
  - Canary
  - MPI backend
  - Legion backend
  - Standalone
  - Final

default:
  interruptible: true
  tags:
    - darwin-slurm-shared
  before_script:
   - echo "Running on $(hostname)"
   - section() { echo $'\e[0K'"section_$1:$(date +%s):$2"$'\r\e[0K'"${3+${COLOR_CYAN}$3${COLOR_PLAIN}}"; }
   - header() { echo "${COLOR_MAGENTA}$1${COLOR_PLAIN}"; }
   - value() { echo $'\t'"${COLOR_BLUE}$1:"" $2${COLOR_PLAIN}"; }
   - variable() { value "${1:0:1}$(tr A-Z a-z <<<${1:1})" "${!1}"; }

.ascgit_job:
  id_tokens:
    SITE_ID_TOKEN:
      aud: https://asc-git.lanl.gov

variables:
  USE_SPACK_UPSTREAM: develop-0e9c8838
  DARWIN_SPACK_UPSTREAM: "/projects/flecsi-devel/gitlab/spack-upstream/${USE_SPACK_UPSTREAM}"
  COLOR_BLUE: "\e[1;34m"
  COLOR_MAGENTA: "\e[1;35m"
  COLOR_CYAN: "\e[1;36m"
  COLOR_PLAIN: "\e[0m"
  # global defaults
  GCC_VERSION: 11.1.0
  CLANG_VERSION: 16.0.6
  ROCM_VERSION: 5.7.1
  CUDA_VERSION: 12.2.1
  CUDA_VERSION_NVCC: 12.3.2
  CUDA_ARCH: 70
  PARTITIONS: general,skylake-gold,skylake-platinum
  GENERAL_ARCH_CONSTRAINT: "(cpu_family:haswell|cpu_family:broadwell|cpu_family:skylake|cpu_family:cascadelake)"
  V100_ARCH_CONSTRAINT: "(cpu_family:haswell|cpu_family:cascadelake)"
  V100_CONSTRAINT: "--constraint=\"${V100_ARCH_CONSTRAINT}&(gpu1_model:Tesla_V100S-PCIE-32GB|gpu1_model:Tesla_V100-PCIE-32GB)\""
  IB_CONSTRAINT: "--constraint=\"${GENERAL_ARCH_CONSTRAINT}&(ib:edr|ib:hdr)\""
  JOB_CONSTRAINTS: "${IB_CONSTRAINT}"
  SCHEDULER_PARAMETERS: "-N1 --qos=debug -p ${PARTITIONS} ${JOB_CONSTRAINTS}"
  LEGION_IBV: legion conduit=ibv
  LEGION_MPI: legion conduit=mpi
  LEGION_IBV_CUDA: "${LEGION_IBV} +cuda +cuda_unsupported_compiler"
  LEGION_MPI_CUDA: "${LEGION_MPI} +cuda +cuda_unsupported_compiler"
  LEGION_IBV_ROCM: "legion+rocm conduit=ibv"
  LEGION_MPI_ROCM: "legion+rocm conduit=mpi"
  KOKKOS_SERIAL: kokkos ~cuda ~rocm
  KOKKOS_CUDA: kokkos%clang@${CLANG_VERSION} +cuda +hwloc ~wrapper
  KOKKOS_CUDA_NVCC: kokkos%gcc@${GCC_VERSION} +cuda +wrapper
  VERSION: "flecsi@${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  ENVIRONMENT: "${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  DEFAULT_TEST_TIMEOUT: 600

#------------------------------------------------------------------------------#
# Common build variants
#------------------------------------------------------------------------------#
.mpich-legion-kokkos-debug: &mpich-legion-kokkos-debug
  VARIANTS: "backend=legion build_type=Debug +flog caliper_detail=low +graphviz +hdf5 +kokkos ^${LEGION_IBV} build_type=Debug +kokkos ^${KOKKOS_SERIAL} ^mpich"

.openmpi-mpi-debug: &openmpi-mpi-debug
  VARIANTS: "backend=mpi build_type=Debug +flog +hdf5 ^openmpi"

include: .gitlab/templates.yml

#------------------------------------------------------------------------------#
# Formatting target.
#
# The selected image must have the required clang-format version
# installed during image creation in the 'gitlab-ci' branch.
#------------------------------------------------------------------------------#

docs_and_format:check:
  extends: [.ascgit_job, .check_docs_and_format_template]
  needs:
    - job: docs_and_format
      artifacts: true
    - job: mpich-tutorial:legion
    - job: mpich-flaxpy:legion
    - job: mpich-poisson:legion
  only:
    - merge_requests
  variables:
    JOB_CONSTRAINTS: ""

#------------------------------------------------------------------------------#
# Test developer tools
#
# Will first create a minimal copy of the Spack upstream checkout in
# $TMPDIR/spack to avoid cloning from GitHub.
#------------------------------------------------------------------------------#

tools:
  extends: [.ascgit_job]
  stage: Canary
  needs: []
  dependencies: []
  only:
    - merge_requests
  script:
    - export HOME=$TMPDIR
    - module load git
    - |
      rsync -rpl \
        --include="lib/spack/**" \
        --exclude-from=${DARWIN_SPACK_UPSTREAM}/.gitignore \
        ${DARWIN_SPACK_UPSTREAM}/ $TMPDIR/spack/
    - git -C $TMPDIR/spack reset --hard
    - git -C $TMPDIR/spack clean -x -f -d
    - tools/darwin.sh

#------------------------------------------------------------------------------#
# Build and unit tests for default settings.
#------------------------------------------------------------------------------#

mpich-defaults:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_defaults_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion +flog ^${LEGION_IBV} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-gnu:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-legion-kokkos-debug
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: skylake-gold
    ARCHIVE_SPACK_ENV: "yes"

mpich-legion-gnu:release:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=legion +flog +hdf5 +kokkos ^${LEGION_IBV} +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-mpi-gnu:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=mpi build_type=Debug caliper_detail=low +flog +graphviz +hdf5 +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

mpich-mpi-gnu:release:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=mpi +flog +hdf5 +kokkos ^${KOKKOS_SERIAL} ^mpich"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Tutorial tests for Legion backend with MPICH provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

mpich-tutorial:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    LABEL: tutorial
    STDIR: tutorial
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold

mpich-flaxpy:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/flaxpy
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold

mpich-poisson:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["mpich-legion-gnu"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: skylake-gold

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and GNU compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-gnu:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion build_type=Debug +flog +hdf5 ^${LEGION_IBV} build_type=Debug ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

openmpi-legion-gnu:release:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=legion +flog +hdf5 ^${LEGION_IBV} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and Clang + CUDA compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-clang-cuda:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    CLANG_VERSION: 13.0.1
    VARIANTS: "backend=legion build_type=Debug +flog +hdf5 +kokkos +cuda cuda_arch=${CUDA_ARCH} ^${LEGION_IBV_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION} +allow-unsupported-compilers ^openmpi"
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    PARTITIONS: volta-x86
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"
    ARCHIVE_SPACK_ENV: "yes"

openmpi-legion-clang-cuda-mpi:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    CLANG_VERSION: 13.0.1
    VARIANTS: "backend=legion build_type=Debug +flog +hdf5 +kokkos +cuda cuda_arch=${CUDA_ARCH} ^${LEGION_MPI_CUDA} build_type=Debug ^${KOKKOS_CUDA} ^cuda@${CUDA_VERSION} +allow-unsupported-compilers ^openmpi"
    TOOLCHAIN: "clang@${CLANG_VERSION}"
    PARTITIONS: volta-x86
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

openmpi-legion-nvcc-cuda:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=legion build_type=Debug +hdf5 +kokkos +cuda cuda_arch=${CUDA_ARCH} ^${LEGION_MPI_CUDA} build_type=Debug ^${KOKKOS_CUDA_NVCC} ^cuda@${CUDA_VERSION_NVCC} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: volta-x86
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"
    ARCHIVE_SPACK_ENV: "yes"



#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and GNU compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

openmpi-mpi-gnu:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  dependencies: []
  needs: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-mpi-debug
    TOOLCHAIN: "gcc@${GCC_VERSION}"

openmpi-mpi-gnu:release:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  rules:
    - if: '$CI_MERGE_REQUEST_LABELS =~ /release_builds/'
      when: always
    - when: never
  variables:
    VARIANTS: "backend=mpi +flog +hdf5 ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"


#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with MPICH provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

mpich-legion-clang:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *mpich-legion-kokkos-debug
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with MPICH provider,
# and Clang compiler toolchain. Intentionally does NOT use Kokkos to also test
# that kind of build.
#------------------------------------------------------------------------------#

mpich-mpi-clang:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    VARIANTS: "backend=mpi build_type=Debug caliper_detail=low +flog +graphviz +hdf5 ^mpich"
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Documentation
#------------------------------------------------------------------------------#
docs_and_format:
  stage: Canary
  extends: [.ascgit_job, .darwin_docs_and_format_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    FORMAT_VERSION: 13.0.1
    JOB_CONSTRAINTS: ""
  allow_failure: true

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and Clang compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-clang:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    <<: *openmpi-mpi-debug
    TOOLCHAIN: "clang@${CLANG_VERSION}"

#------------------------------------------------------------------------------#
# Build and unit tests for MPI backend with OpenMPI provider,
# and ROCM compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-mpi-rocm:
  stage: MPI backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    AMDGPU_TARGET: gfx90a
    VARIANTS: "backend=mpi build_type=Debug +flog +hdf5 +kokkos +rocm amdgpu_target=${AMDGPU_TARGET} ^kokkos+hwloc ^boost%rocmcc@${ROCM_VERSION} ^hip@${ROCM_VERSION} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
    ARCHIVE_SPACK_ENV: "yes"

#------------------------------------------------------------------------------#
# Build and unit tests for Legion backend with OpenMPI provider,
# and ROCM compiler toolchain.
#------------------------------------------------------------------------------#

openmpi-legion-rocm:
  stage: Legion backend
  extends: [.ascgit_job, .darwin_build_template]
  needs: []
  dependencies: []
  only:
    - merge_requests
  variables:
    AMDGPU_TARGET: gfx90a
    VARIANTS: "backend=legion build_type=Debug +flog +hdf5 +kokkos +rocm amdgpu_target=${AMDGPU_TARGET} ^${LEGION_MPI_ROCM} ^kokkos+hwloc ^boost%rocmcc@${ROCM_VERSION} ^hip@${ROCM_VERSION} ^openmpi"
    TOOLCHAIN: "gcc@${GCC_VERSION}"
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
    ARCHIVE_SPACK_ENV: "yes"

#------------------------------------------------------------------------------#
# GPU standalone tests
#------------------------------------------------------------------------------#

openmpi-poisson-cuda-clang:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["openmpi-legion-clang-cuda"]
  only:
    - merge_requests
  variables:
    CLANG_VERSION: 13.0.1
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: volta-x86
    V100_ARCH_CONSTRAINT: "${JOB_ARCH_CONSTRAINT}"
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

openmpi-poisson-cuda-nvcc:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["openmpi-legion-nvcc-cuda"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug 
    PARTITIONS: volta-x86
    V100_ARCH_CONSTRAINT: "${JOB_ARCH_CONSTRAINT}"
    JOB_CONSTRAINTS: "${V100_CONSTRAINT}"

openmpi-poisson-rocm:mpi:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["openmpi-mpi-rocm"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"

openmpi-poisson-rocm:legion:
  extends: [.ascgit_job, .darwin_standalone_template]
  needs:
    ["openmpi-legion-rocm"]
  only:
    - merge_requests
  variables:
    LABEL: standalone
    STDIR: tutorial/standalone/poisson
    BUILD_TYPE: Debug
    PARTITIONS: shared-gpu-amd-mi250
    SCHEDULER_PARAMETERS: "-N 1 --qos=debug -p ${PARTITIONS}"
